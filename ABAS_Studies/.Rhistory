filterDF <- as.data.frame(predict(filterDummy,filtered))
#incomplete rows
filterDF <- filterDF[complete.cases(filterDF),]
rm(filterDummy)
rm(filtered)
#force binary outcome
filterDF$outcome <- ifelse(filterDF$outcome == 1,'yes','no')
filterDF$outcome <- as.factor(filterDF$outcome)
#data splitting
set.seed(123456)
trainIndex <- createDataPartition(filterDF$outcome, p = 0.8,
list = FALSE,
times = 1)
train <- filterDF[ trainIndex,]
test  <- filterDF[-trainIndex,]
rm(trainIndex)
print(gbm3)
plot(gbm3)
data.frame(predict(gbm3,newdata=test[-1]),test[,1])
validateGBM3 <- data.frame(predict(gbm3,newdata=test[-1]),test[,1])
names(validateGBM3) <- c("IndexTest","Truth")
validateGBM3
filter(validateGBM3, Truth=="yes")
View(validateGBM3)
?filter
library(dplyr)
library(reshape2)
library(ggplot2)
filter(validateGBM3, Truth=="yes")
filter(validateGBM3, Truth=="yes") %>% group_by(IndexTest) %>% summarise(sum(IndexTest))
filter(validateGBM3, Truth=="yes") %>% group_by(IndexTest) %>% summarise(count(IndexTest))
filter(validateGBM3, Truth=="yes") %>% group_by(IndexTest) %>% summarise(length(IndexTest))
filter(validateGBM3, Truth=="yes") %>% group_by(IndexTest) %>% summarise(length(IndexTest))[1]
temp <- filter(validateGBM3, Truth=="yes") %>% group_by(IndexTest) %>% summarise(length(IndexTest))
temp
temp[1]
temp[2]
temp[2,1]
temp[2,2]
temp[2,1]
temp[1,1]
temp[1,2]
temp[,2]
temp[2,2]/temp[2,1]
temp[2,2]
temp
filter(validateGBM3, Truth=="yes") %>% group_by(IndexTest) %>% summarise(length(IndexTest))
View(validateGBM3)
View(test)
16/17
filter(validateGBM3, Truth=="no") %>% group_by(IndexTest) %>% summarise(length(IndexTest)) #so sensitivity = 16/17 = 94%
5/8
0.941*0.625
0.941*(1-0.625)
0.941/(1-0.625)
(1-0.941)/(0.625)
filter(validateGBM3, Truth=IndexTest)
validateGBM3$IndexTest & validateGBM3$Truth
validateGBM3$IndexTest = validateGBM3$Truth
validateGBM3 <- data.frame(predict(gbm3,newdata=test[-1]),test[,1])
names(validateGBM3) <- c("IndexTest","Truth")
View(validateGBM3)
View(validateGBM3)
filter(validateGBM3, Truth=="yes" & IndexTest=="yes") %>% group_by(IndexTest) %>% summarise(length(IndexTest)) #so sensitivity = 16/17 = 94%
filter(validateGBM3, Truth=="yes" & IndexTest=="yes")
filter(validateGBM3, Truth=="no" & IndexTest=="no")
length( filter(validateGBM3, Truth=="yes" & IndexTest=="yes") ) / length( filter(validateGBM3, Truth=="no" & IndexTest=="no") )
length( filter(validateGBM3, Truth=="yes" & IndexTest=="yes") )
View(validateGBM3)
21/25
validateGLM3 <- data.frame(predict(glmnet3,newdata=test[-1]),test[,1])
plot(varImp(glmnet3,scale=F))
plot(glmnet2)
plot(varImp(glmnet2,scale=F))
validateGLM2 <- data.frame(predict(glmnet2,newdata=test[-1]),test[,1])
predictionOutcome2 <- painRxOes
predictionVariable2 <- data.frame(
numAge,
recodeGender,
recodeChemo,
recodeTumour,
recodeDs,
recodePreRxPain,
preRxMedAnalg,
preRxMedSynOpi,
preRxMedOpiods,
statusNode
)
predictionSet <- data.frame(outcome = predictionOutcome2,predictionVariable2)
#incomplete rows
predictionSet <- predictionSet[complete.cases(predictionSet),]
# ------ non-zero variances
#nzv <- nearZeroVar(predictionSet)
filtered <- predictionSet
#rm(nzv)
# ------ dummify any factors
filterDummy <- dummyVars("~.",data=filtered, fullRank=F)
filterDF <- as.data.frame(predict(filterDummy,filtered))
names(filterDF)
rm(filterDummy)
rm(filtered)
#force binary outcome
filterDF$outcome <- ifelse(filterDF$outcome == 1,'yes','no')
filterDF$outcome <- as.factor(filterDF$outcome)
#data splitting
set.seed(123456)
trainIndex <- createDataPartition(filterDF$outcome, p = 0.8,
list = FALSE,
times = 1)
train <- filterDF[ trainIndex,]
test  <- filterDF[-trainIndex,]
rm(trainIndex)
validateGLM2 <- data.frame(predict(glmnet2,newdata=test[-1]),test[,1])
names(validateGLM2) <- c("IndexTest","Truth")
View(validateGLM2)
filter(validateGLM2, Truth=="yes") %>% group_by(IndexTest) %>% summarise(length(IndexTest)) #so sensitivity = 16/17 = 94%
View(validateGLM2)
filter(validateGLM2, Truth=="no") %>% group_by(IndexTest) %>% summarise(length(IndexTest)) #so specificity = 5/8 = 62%
View(validateGLM2)
validateGLM3 <- data.frame(predict(glmnet3,newdata=test[-1]),test[,1])
names(validateGLM3) <- c("IndexTest","Truth")
filter(validateGLM3, Truth=="yes") %>% group_by(IndexTest) %>% summarise(length(IndexTest)) #so sensitivity = 17/17 = 100%
filter(validateGLM3, Truth=="no") %>% group_by(IndexTest) %>% summarise(length(IndexTest)) #so specificity = 5/8 = 62%
3/8
filter(validateGLM3, Truth=="yes" & IndexTest=="yes")
filter(validateGLM3, Truth=="no" & IndexTest=="no") #accuracy = 21/25 = 84%
0.941/(1-0.625)
manual2 <- glm(as.factor(painRxOes) ~ D1cc,family=binomial, data=tempData)
summary(manual2)
manual2 <- glm(as.factor(painRxOes) ~ D1cc,family=quasibinomial, data=tempData)
summary(manual2)
subdata <- data.frame(painRxOes,D1cc)
subdata <- data.frame(painRxOes,D1cc)
subdata <- data.frame(painRxOes,D1cc,recodeTumour,statusNode)
manual3 <- glm(as.factor(painRxOes) ~ .,family=quasibinomial, data=subdata)
summary(manual3)
subdata <- data.frame(painRxOes,D1cc)
View(subdata)
set.seed(123456)
trainIndex <- createDataPartition(subdata$painRxOes, p = 0.8,
list = FALSE,
times = 1)
test  <- subdata[-trainIndex,]
View(test)
View(test)
pred <- predict.glm(manual2,test$D1cc,type="response")
summary(manual2)
pred <- predict.glm(manual2,test[,2],type="response")
test[,2]
test
pred <- predict.glm(manual2,test,type="response")
pred
ans <- test$painRxOes
perf = function(cut) {
yhat <- pred > cut
w <- which(ans == 1)
sens <- mean( yhat[w] == 1 )
spec <- mean( yhat[-w] == 0 )
crate <- mean( ans==yhat )
out = t(as.matrix(c(sens, spec, crate)))
colnames(out) = c("sensitivity", "specificity", "class.rate")
return(out)
}
ans <- test$painRxOes
s <- seq(.01,.99,length=100)
manualROC <- sapply(s,perf)
manualROC
plot(x = 1-manualROC[2,], y=manualROC[1,])
plot(Risk_Cutoff <- c(0,1), Parameter <- c(0,1),type="n")
lines(s,manualROC[1,],col="red")
lines(s,manualROC[2,],col="blue")
lines(s,manualROC[3,],col="black")
max(manualROC)
View(manualROC)
max(manualROC[3,])
subdata <- data.frame(painRxOes,D1cc)
test  <- subdata
pred <- predict.glm(manual2,test,type="response")
ans <- test$painRxOes
s <- seq(.01,.99,length=100)
manualROC <- sapply(s,perf)
plot(x = 1-manualROC[2,], y=manualROC[1,])
plot(Risk_Cutoff <- c(0,1), Parameter <- c(0,1),type="n")
lines(s,manualROC[1,],col="red")
lines(s,manualROC[2,],col="blue")
lines(s,manualROC[3,],col="black")
max(manualROC[3,])
manualROC
s <- seq(.01,.99,length=1000)
manualROC <- sapply(s,perf)
plot(Risk_Cutoff <- c(0,1), Parameter <- c(0,1),type="n")
lines(s,manualROC[1,],col="red")
lines(s,manualROC[2,],col="blue")
lines(s,manualROC[3,],col="black")
max(manualROC[3,])
manualROC
set.seed(123456)
trainIndex <- createDataPartition(subdata$painRxOes, p = 0.8,
list = FALSE,
times = 1)
test  <- subdata[-trainIndex,]
pred <- predict.glm(manual2,test,type="response")
ans <- test$painRxOes
s <- 0.50
manualROC <- sapply(s,perf)
pred
pred >= 0.5
perf(0.5)
subdata <- data.frame(painRxOes,D1cc,recodeTumour,statusNode)
test  <- subdata
pred <- predict.glm(manual3,test,type="response")
ans <- test$painRxOes
s <- seq(.01,.99,length=1000)
manualROC <- sapply(s,perf)
plot(Risk_Cutoff <- c(0,1), Parameter <- c(0,1),type="n")
lines(s,manualROC[1,],col="red")
lines(s,manualROC[2,],col="blue")
lines(s,manualROC[3,],col="black")
max(ManualROC[3,])
max(manualROC[3,])
set.seed(123456)
trainIndex <- createDataPartition(subdata$painRxOes, p = 0.8,
list = FALSE,
times = 1)
test  <- subdata[-trainIndex,]
pred <- predict.glm(manual3,test,type="response")
ans <- test$painRxOes
perf(0.65)
0.8125/0.2
install.packages(c("caret", "class", "evaluate", "foreach", "foreign", "formatR", "highr", "iterators", "lme4", "manipulate", "MASS", "mgcv", "nlme", "nnet", "randomForest", "Rcpp", "RcppEigen", "spatial", "stringi"))
install.packages("lme4")
install.packages("lme4")
?runif
?rnorm
rnorm(sd=1,mean=100)
rnorm(sd=1,mean=100,n=17)
test <- rnorm(sd=1,mean=100,n=17)
plot(test)
test <- rnorm(sd=2,mean=94,n=3)
rnorm(sd=2,mean=94,n=3)
c(rnorm(sd=2,mean=94,n=3),rnorm(sd=0.3,mean=100,n=17))
c(rnorm(sd=2,mean=96,n=3),rnorm(sd=0.3,mean=100,n=17))
c(rnorm(sd=2,mean=97,n=3),rnorm(sd=0.3,mean=100,n=17))
c(rnorm(sd=2,mean=97,n=3),rnorm(sd=0.3,mean=100,n=17))
install.packages(c("ggplot2", "manipulate", "mgcv"))
?ggplot
?ggplot2
library(ggplot2)
?ggplot2
?ggplot
version()
?version
R.version()
?version
R.Version()
install.packages(c("digest", "manipulate", "nlme", "Rcpp"))
library(ggplot2)
install.packages(c("knitr", "lme4", "manipulate", "memoise", "mgcv", "munsell", "nlme", "nnet", "pbkrtest", "quantreg", "R6", "RcppEigen"))
install.packages(c("boot", "glmnet", "gtable", "manipulate", "nlme", "RcppEigen", "scales"))
setwd("/Users/lenw/Documents/Python_Programming/repo_Raystation_Scripting")
library(reshape2)
library(ggplot2)
library(dplyr)
#this needs to be edited to set the folder that contains the files
setwd("/Users/lenw/Documents/Python_Programming/repo_Raystation_Scripting")
list.files(pattern = "\\.csv$")
rawdata <- read.csv("ck-sd-genanalyser2.csv", header=T)
rawdataNew <- read.csv("ck-sd-genanalyser3.csv", header=T)
setwd("/Users/lenw/Documents/Python_Programming/repo_Raystation_Scripting")
list.files(pattern = "\\.csv$")
setwd("/Users/lenw/Documents/Python_Programming/repo_Raystation_Scripting")
list.files(pattern = "\\.csv$")
library(reshape2)
library(ggplot2)
library(dplyr)
setwd("/Users/lenw/Documents/Python_Programming/repo_Raystation_Scripting")
list.files(pattern = "\\.csv$")
setwd("/Users/lenw/Documents/Python_Programming/repo_Raystation_Scripting/ABAS_Studies")
list.files(pattern = "\\.csv$")
rawdata <- read.csv("ck-sd-genanalyser2.csv", header=T)
rawdataNew <- read.csv("ck-sd-genanalyser3.csv", header=T)
View(rawdataNew)
setwd("/Users/lenw/Documents/Python_Programming/repo_Raystation_Scripting/ABAS_Studies")
list.files(pattern = "\\.csv$")
#read csv file of raw values
rawdata <- read.csv("ck-sd-genanalyser2.csv", header=T)
rawdataNew <- read.csv("ck-sd-genanalyser3.csv", header=T)
#parse the volume subset
volumes <- filter(rawdata, type=="vol")
volumesNew <- filter(rawdataNew,type == "vol")
volumesDistribution <- data.frame(
patid = volumes$patid,
organ = volumes$organ,
ref = volumes$OR,
ck = volumes$CK,
sd = volumes$SD,
rs = volumes$RS,
mf = volumes$MF,
mf2 = volumesNew$Mfnew,
CKvsOR = volumes$CK - volumes$OR,
SDvsOR = volumes$SD - volumes$OR,
RSvsOR = volumes$RS - volumes$OR,
MFvsOR = volumes$MF - volumes$OR,
MF2vsOR = volumesNew$Mfnew - volumes$OR,
Rel.CK = volumes$dCK / volumes$CK,
Dice.CK = (2*volumes$dCK)/(volumes$OR + volumes$CK),
Rel.SD = volumes$dSD / volumes$SD,
Dice.SD = (2*volumes$dSD)/(volumes$OR + volumes$SD),
Rel.RS = volumes$dRS / volumes$RS,
Dice.RS = (2*volumes$dRS)/(volumes$OR + volumes$RS),
Rel.MF = volumes$dMF / volumes$MF,
Dice.MF = (2*volumes$dMF)/(volumes$OR + volumes$MF),
Rel.MF2 = volumesNew$dMFnew / volumesNew$Mfnew,
Dice.MF2 = (2*volumesNew$dMFnew)/(volumes$OR + volumesNew$Mfnew)
)
mVolumesDistribution <- melt(volumesDistribution,id=c("patid","organ"))
names(mVolumesDistribution) <- c("patid","organ","Category","VolDiff")
mVolumesDistribution <- mVolumesDistribution[complete.cases(mVolumesDistribution),]
#parse the dosimetry subset
dose <- filter(rawdata, type!="vol")
doseNew <- filter(rawdataNew, type!="vol")
doseDistribution <- data.frame(
patid = dose$patid,
organ = dose$organ,
type = dose$type,
ref = dose$OR,
ck = dose$CK,
sd = dose$SD,
rs = dose$RS,
mf = dose$MF,
mf2 = doseNew$Mfnew,
CKvsOR = as.numeric(as.character(dose$CK))-as.numeric(as.character(dose$OR)),
SDvsOR = as.numeric(as.character(dose$SD))-as.numeric(as.character(dose$OR)),
RSvsOR = as.numeric(as.character(dose$RS))-as.numeric(as.character(dose$OR)),
MFvsOR = as.numeric(as.character(dose$MF))-as.numeric(as.character(dose$OR)),
MF2vsOR = as.numeric(as.character(doseNew$Mfnew))-as.numeric(as.character(doseNew$OR))
)
mDoseDistribution <- melt(doseDistribution,id=c("patid","organ","type"))
names(mDoseDistribution) <- c("patid","organ","type","Category","DoseDiff")
mDoseDistribution <- mDoseDistribution[complete.cases(mDoseDistribution),]
#clean up
rm(dose,volumes,rawdata,doseNew,volumesNew,rawdataNew)
rm(doseDistribution,volumesDistribution)
#colour palette definition
paldef0 <- c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3")
paldef <- c("#E41A1C", "#377EB8", "black", "#4DAF4A", "#984EA3")
paldef2 <- c("#E41A1C", "#377EB8", "grey80", "#4DAF4A", "#984EA3")
paldef3 <- c("black", "#4DAF4A", "#984EA3")
ppi <- 600
# Calculate the height and width (in pixels) for a 4x4-inch image at 600 ppi
png("ABAS-Lung-in_Raystation-%d.png", width=6*ppi, height=4*ppi, res=ppi)
#absolute lung volume correlation plot
y <- filter(mVolumesDistribution, organ=="pulm" & Category %in% c("ck","sd","rs","mf","mf2"))
x <- filter(mVolumesDistribution, organ=="pulm" & Category %in% c("ref"))
all <- cbind(y,Baseline=x$VolDiff)
ggplot(all,aes(
x=Baseline,
y=VolDiff,
shape=Category, colour=Category)) +
geom_point(size=3) +
scale_shape_manual(values=c(15,16,0,17,18)) +
xlim(1900,5500) + ylim(1900,5500) +
geom_abline(intercept = 0, slope = 1, linetype="dashed") +
labs(x = "Reference Lung Volume (in cc)", y = "Drawn Lung Volume (in cc)") +
theme_bw() +
scale_colour_manual(values = paldef)
#summarise the median and distribution of the absolute volume differences
y <- filter(mVolumesDistribution, organ=="pulm" & Category %in% c("CKvsOR","SDvsOR","RSvsOR","MFvsOR","MF2vsOR"))
aggregate(y$VolDiff, by=list(y$Category), FUN=summary)
#summary information graphically
ggplot(filter(mVolumesDistribution, organ=="pulm" & Category %in% c("CKvsOR","SDvsOR","RSvsOR","MFvsOR","MF2vsOR") ),
aes(x=Category, y=VolDiff)) +
ylim(-200,800) +
geom_boxplot(aes(fill=Category)) +
theme_bw() +
labs(x = "Contouring comparison", y = "Lung volume difference (in ccm)") +
scale_fill_manual(values = paldef2, guide=FALSE)
#correlations in lung doses differences
y <- filter(mDoseDistribution, type=="v20" & organ=="pulm" & Category %in% c("CKvsOR","SDvsOR","RSvsOR","MFvsOR","MF2vsOR"))
x <- filter(mDoseDistribution, type=="avdose" & organ=="pulm" & Category %in% c("CKvsOR","SDvsOR","RSvsOR","MFvsOR","MF2vsOR"))
all <- cbind(y,MLD=x$DoseDiff)
ggplot(all,aes(
y=MLD,
x=100*DoseDiff,
shape=Category, colour=Category)) +
geom_point(size=3) +
scale_shape_manual(values=c(15,16,0,17,18)) +
geom_abline(intercept = 0, slope = 0.5, linetype="dashed") +
labs(y = "Change in MLD (Gy)", x = "Change in Lung V20Gy (pct difference)") +
theme_bw() +
scale_colour_manual(values = paldef)
#summarise the median and distribution of the V20 volume differences
y <- filter(mDoseDistribution, organ=="pulm" & type=="v20" & Category %in% c("CKvsOR","SDvsOR","RSvsOR","MFvsOR","MF2vsOR"))
aggregate(100*y$DoseDiff, by=list(y$Category), FUN=summary)
#summarise the median and distribution of the mean lung dose differences
y <- filter(mDoseDistribution, organ=="pulm" & type=="avdose" & Category %in% c("CKvsOR","SDvsOR","RSvsOR","MFvsOR","MF2vsOR"))
aggregate(y$DoseDiff, by=list(y$Category), FUN=summary)
#dice similarity comparison
ggplot(filter(mVolumesDistribution, organ=="pulm" & Category %in% c("Dice.CK","Dice.SD","Dice.RS","Dice.MF","Dice.MF2") ),
aes(x=Category, y=VolDiff)) +
geom_boxplot(aes(fill=Category)) +
theme_bw() +
labs(x = "Contouring comparison", y = "Dice Similarity in Lung (a.u.)") +
scale_fill_manual(values = paldef2, guide=FALSE)
y <- filter(mVolumesDistribution, organ=="pulm" & Category %in% c("Dice.CK","Dice.SD","Dice.RS","Dice.MF","Dice.MF2"))
aggregate(y$VolDiff, by=list(y$Category), FUN=summary)
dev.off()
ppi <- 600
# Calculate the height and width (in pixels) for a 4x4-inch image at 600 ppi
png("ABAS-Heart-in_Raystation-%d.png", width=6*ppi, height=4*ppi, res=ppi)
#absolute heart volume correlation plot
y <- filter(mVolumesDistribution, organ=="cor" & Category %in% c("ck","sd","rs","mf","mf2"))
x <- filter(mVolumesDistribution, organ=="cor" & Category %in% c("ref"))
all <- cbind(y,Baseline=x$VolDiff)
ggplot(all,aes(
x=Baseline,
y=VolDiff,
shape=Category, colour=Category)) +
geom_point(size=3) +
xlim(400,1600) + ylim(400,1600) +
scale_shape_manual(values=c(15,16,0,17,18)) +
geom_abline(intercept = 0, slope = 1, linetype="dashed") +
labs(x = "Reference Heart Volume (in cc)", y = "Drawn Heart Volume (in cc)") +
theme_bw() +
scale_colour_manual(values = paldef)
#summarise the median and distribution of the absolute volume differences
y <- filter(mVolumesDistribution, organ=="cor" & Category %in% c("CKvsOR","SDvsOR","RSvsOR","MFvsOR","MF2vsOR"))
aggregate(y$VolDiff, by=list(y$Category), FUN=summary)
#summary information graphically
ggplot(filter(mVolumesDistribution, organ=="cor" & Category %in% c("CKvsOR","SDvsOR","RSvsOR","MFvsOR","MF2vsOR") ),
aes(x=Category, y=VolDiff)) +
ylim(-300,200) +
geom_boxplot(aes(fill=Category)) +
theme_bw() +
labs(x = "Contouring comparison", y = "Heart volume difference (in ccm)") +
scale_fill_manual(values = paldef2, guide=FALSE)
#correlations in heart doses differences
y <- filter(mDoseDistribution, type=="v50" & organ=="cor" & Category %in% c("CKvsOR","SDvsOR","RSvsOR","MFvsOR","MF2vsOR"))
x <- filter(mDoseDistribution, type=="avdose" & organ=="cor" & Category %in% c("CKvsOR","SDvsOR","RSvsOR","MFvsOR","MF2vsOR"))
all <- cbind(y,MHD=x$DoseDiff)
ggplot(all,aes(
y=MHD,
x=100*DoseDiff,
shape=Category, colour=Category)) +
geom_point(size=3) +
scale_shape_manual(values=c(15,16,0,17,18)) +
geom_abline(intercept = 0, slope = 0.8, linetype="dashed") +
labs(y = "Change in MHD (Gy)", x = "Change in Heart V50Gy (pct difference)") +
theme_bw() +
scale_colour_manual(values = paldef)
#summarise the median and distribution of the V50 volume differences
y <- filter(mDoseDistribution, organ=="cor" & type=="v50" & Category %in% c("CKvsOR","SDvsOR","RSvsOR","MFvsOR","MF2vsOR"))
aggregate(100*y$DoseDiff, by=list(y$Category), FUN=summary)
#summarise the median and distribution of the mean heart dose differences
y <- filter(mDoseDistribution, organ=="cor" & type=="avdose" & Category %in% c("CKvsOR","SDvsOR","RSvsOR","MFvsOR","MF2vsOR"))
aggregate(y$DoseDiff, by=list(y$Category), FUN=summary)
#dice similarity comparison
ggplot(filter(mVolumesDistribution, organ=="cor" & Category %in% c("Dice.CK","Dice.SD","Dice.RS","Dice.MF","Dice.MF2") ),
aes(x=Category, y=VolDiff)) +
geom_boxplot(aes(fill=Category)) +
theme_bw() +
labs(x = "Contouring comparison", y = "Dice Similarity in Heart (a.u.)") +
scale_fill_manual(values = paldef2, guide=FALSE)
y <- filter(mVolumesDistribution, organ=="cor" & Category %in% c("Dice.CK","Dice.SD","Dice.RS","Dice.MF","Dice.MF2"))
aggregate(y$VolDiff, by=list(y$Category), FUN=summary)
dev.off()
ppi <- 600
# Calculate the height and width (in pixels) for a 4x4-inch image at 600 ppi
png("ABAS-SpinalCord-in_Raystation-%d.png", width=6*ppi, height=4*ppi, res=ppi)
#absolute spinal cord volume correlation plot
#
#note that here - it is not the volume agreement that matters but
#rather the dice similarity and overlap volume
#
#summarise the median and distribution of the absolute volume differences
y <- filter(mVolumesDistribution, organ=="canalis" & Category %in% c("RSvsOR","MFvsOR","MF2vsOR"))
aggregate(y$VolDiff, by=list(y$Category), FUN=summary)
#summary information graphically
ggplot(filter(mVolumesDistribution, organ=="canalis" & Category %in% c("RSvsOR","MFvsOR","MF2vsOR") ),
aes(x=Category, y=VolDiff)) +
ylim(-50,50) +
geom_boxplot(aes(fill=Category)) +
theme_bw() +
labs(x = "Contouring comparison", y = "Spinal cord volume difference (in ccm)") +
scale_fill_manual(values = c("grey80", "#4DAF4A", "#984EA3"), guide=FALSE)
#similarity and overlap
y <- filter(mVolumesDistribution, organ=="canalis" & Category %in% c("Rel.CK","Rel.SD","Rel.RS","Rel.MF","Rel.MF2"))
x <- filter(mVolumesDistribution, organ=="canalis" & Category %in% c("Dice.CK","Dice.SD","Dice.RS","Dice.MF","Dice.MF2"))
all <- cbind(y,Dice=x$VolDiff)
ggplot(all,aes(
y=VolDiff,
x=Dice,
shape=Category, colour=Category)) +
geom_point(size=3) +
scale_shape_manual(values=c(0,17,18)) +
xlim(0.5,1) + ylim(0.5,1) +
geom_abline(intercept = 0, slope = 1, linetype="dashed") +
labs(y = "Volume overlap fraction", x = "Dice Similarity in spinal cord") +
theme_bw() +
scale_colour_manual(values = c("black", "#4DAF4A", "#984EA3"))
#summarise the median and distribution of the high dose differences (d1cc)
y <- filter(mDoseDistribution, organ=="canalis" & type=="d1cc" & Category %in% c("CKvsOR","SDvsOR","RSvsOR","MFvsOR","MF2vsOR"))
aggregate(y$DoseDiff, by=list(y$Category), FUN=summary)
#summary information graphically
ggplot(filter(mDoseDistribution, organ=="canalis" & Category %in% c("RSvsOR","MFvsOR","MF2vsOR") ),
aes(x=Category, y=DoseDiff)) +
ylim(-5,12) +
geom_boxplot(aes(fill=Category)) +
theme_bw() +
labs(x = "Contouring comparison", y = "Change in D1cc High Dose (Gy)") +
scale_fill_manual(values = c("grey80", "#4DAF4A", "#984EA3"), guide=FALSE)
dev.off()
